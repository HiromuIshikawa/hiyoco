* Informant
  
本サービスは，gRPC により受け取ったカレンダの予定を Slack に投稿する．

* Setup for production

TBA...

* Setup for development
** Requirements
+ Python 3.x

** Settings
1. ソースコードの取得

  #+BEGIN_SRC sh
  $ git clone https://github.com/nomlab/hiyoco
  #+END_SRC 

2. 実行に必要な Python ライブラリのインストール

  #+BEGIN_SRC sh
  $ pip -r install requirements/development.txt
  #+END_SRC

3. =.proto= のコンパイル

  本サービスの実行に必要な以下の2つの =.proto= をコンパイルする．
   + hiyoco/proto/calendar/event.proto
   + hiyoco/proto/informant/service.proto

  以下を実行すると，本サービスのディレクトリに =hiyoco= ディレクトリが作成され，その中にコンパイル後のファイルが配置される．

   #+BEGIN_SRC sh
   $ chmod +x compile_proto.sh
   $ ./compile_proto.sh
   #+END_SRC

4. Slack に関する設定

  以下の3つの項目を設定する．

   + 投稿先ワークスペースの Slack トークン
   + 投稿先のチャンネル名
   + Bot のユーザ名
     
   #+BEGIN_SRC sh
   $ cp settings.yml.sample settings.yml
   $ vim settings.yml # - > Replace <YOUR_SLACK_TOKEN> to your slack token
                    # - > Replace <CHANNEL> to your slack channel
                    # - > Replace <USER_NAME> to display name
   #+END_SRC

** Launch informant
1. informant のサーバを起動

  #+BEGIN_SRC sh
  $ python informant_server.py [PORT]
  #+END_SRC

  上記を実行すると， =http://localhost:[PORT]= でサーバが待機する．ポート番号 =[PORT]= は指定しなかった場合， =50051= となる．

** Test
1. テストスクリプトの実行

  =[PORT]= に =informant_server.py= 起動時に指定したポート番号を指定して以下のコマンドを実行する．

  #+BEGIN_SRC sh
  $ python informant_test.py [PORT]
  #+END_SRC

  上記を実行すると，指定したワークスペースのチャンネルに以下のメッセージが送信される．

  #+BEGIN_SRC
  Summary:Test event
  Description:This is test
  #+END_SRC
