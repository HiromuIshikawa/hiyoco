* Informant
  
本サービスは，gRPC により受け取ったカレンダの予定を Slack に投稿する．

* Setup for production

TBA...

* Setup for development
** Requirements
+ Python 3.x

** Settings
1. ソースコードの取得

  #+BEGIN_SRC sh
  $ git clone https://github.com/nomlab/hiyoco
  #+END_SRC 

2. 動作に必要な設定

  以下のコマンドを実行し，本サービスの動作に必要な設定を対話式に行う．
   
  #+BEGIN_SRC sh
  $ chmod +x setup.sh
  $ ./setup.sh
  #+END_SRC

  上記を実行すると，以下の処理が行われる．
   + 以下のファイルに記述された Python ライブラリのインストール
    + requirements/common.txt
    + requirements/development.txt
   + 以下の2つの =.proto= のコンパイル
    + hiyoco/proto/calendar/event.proto
    + hiyoco/proto/informant/service.proto
   + Slack に関する設定
    + 投稿先ワークスペースの Slack トークン
    + 投稿先のチャンネル名
    + Bot の表示名

  下記に実行例を示す．

  #+BEGIN_SRC sh
  Start setup for informant.
  Python library will be installed. Are you OK? [Y/n]
    # 必要なPythonライブラリのインストール
  Done
  Start compile proto file. 
    # protoファイルのコンパイル
  Done
  Set slack-token, post destination channel, and bot display name.
  You can get slack-token from following URL.
  https://api.slack.com/custom-integrations/legacy-tokens
  YOUR_SLACK_TOKEN: # Slack トークンの入力
  CHANNEL_NAME: # 投稿先チャンネル名の入力
  DISPLAY_BOT_NAME: # Bot の表示名を入力
  #+END_SRC

** Launch informant
1. informant のサーバを起動

  #+BEGIN_SRC sh
  $ python informant_server.py [PORT]
  #+END_SRC

  上記を実行すると， =http://localhost:[PORT]= でサーバが待機する．ポート番号 =[PORT]= は指定しなかった場合， =50051= となる．

** Test
1. テストスクリプトの実行

  =[PORT]= に =informant_server.py= 起動時に指定したポート番号を指定して以下のコマンドを実行する．

  #+BEGIN_SRC sh
  $ python informant_test.py [PORT]
  #+END_SRC

  上記を実行すると，指定したワークスペースのチャンネルに以下のメッセージが送信される．

  #+BEGIN_SRC
  Summary:Test event
  Description:This is test
  #+END_SRC
