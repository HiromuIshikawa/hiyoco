#!/usr/bin/env ruby

this_dir = File.expand_path(File.dirname(__FILE__))
lib_dir = File.join(this_dir, '../lib/proto')
$LOAD_PATH.unshift(lib_dir) unless $LOAD_PATH.include?(lib_dir)

gemfile = File.expand_path("../../Gemfile", __FILE__)

if File.exists?(gemfile + ".lock")
  ENV["BUNDLE_GEMFILE"] = gemfile
  require "bundler/setup"
end

require "rubygems"
require "bundler/setup"
require "grpc"
require "google/protobuf/well_known_types"
require "hiyoco/calendar_watcher/service_services_pb"
require 'googleauth'
require 'googleauth/stores/file_token_store'
require 'google/api_client/client_secrets'
require 'google/apis/calendar_v3'
require "clian"
require "goohub"
require 'goohub/command'
require 'calendar_watcher/command'

Clian::Cli.bundler_rbenv_setup(__FILE__)

Encoding.default_external="UTF-8"

class CalendarWatcherCLI < GoohubCLI
  package_name 'CALENDAR_WATCHER'

  Signal.trap(:INT){
    Thor.new.say "Interrupted quit.", :red
    exit(0)
  }

  private

  def setup_global_options(command, *args)
    exit_on_error do
      return true if ["init", "help"].member?(command.name)

      @config = Goohub::Config.create_from_file(options[:config] ||
                                                DEFAULT_CONFIG_PATH)
    end
  end

  def client
    begin
      @client ||= Goohub::Client.new(@config.general, "calendar_watcher")
    rescue Goohub::Client::AuthorizationError
      STDERR.print "ERROR: try calendar_watcher auth command.\n"
      exit(1)
    end
  end
end

CalendarWatcherCLI.start(ARGV)
